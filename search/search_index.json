{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"practica1/practica1/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del Despliegue de una Aplicaci\u00f3n con Node.js","text":""},{"location":"practica1/practica1/#despliegue-con-docker","title":"Despliegue con Docker","text":"<p>Para comenzar esta pr\u00e1ctica, se deber\u00e1 clonar el siguiente repositorio de GitHub: <code>https://github.com/raul-profesor/DAW_practica_6.1_2024.git</code></p> <p></p> <p>Antes de seguir adelante, se deber\u00e1 tener instalado Docker en el sistema.  Para ello, se deber\u00e1 ejecutar el siguiente comando:</p> <p></p> <p>Una vez instalado Docker, se deber\u00e1 modificar el archivo <code>Dockerfile</code> del repositorio clonado previamente pra construir la imagen y hacer funcionar el contenedor.</p> <p></p> <p>Ahora se deber\u00e1 construir la imagen <code>librodirecciones</code> utilizando el contexto actual.  Para ello, se deber\u00e1 ejecutar el siguiente comando:</p> <p></p> <p>Se proder\u00e1 ahora a iniciar el contenedor en modo demonio y hacer que escuche las peticiones en el puerto 3000 y se har\u00e1 coincidir el puerto 3000 del contendor.</p> <p></p> <p>Si se prueba, deber\u00e1 aparecer la siguiente pantalla:</p> <p></p> <p>La aplicaci\u00f3n intenta conectarse a la base de datos en localhost pero la base de datos a\u00fan no est\u00e1 configurada  en otro contenedor.</p>"},{"location":"practica1/practica1/#docker-compose","title":"Docker Compose","text":"<p>Antes de seguir adelante, se deber\u00e1 tener instalado Docker Compose en el sistema. Para ello, se deber\u00e1 ejecutar el siguiente comando:</p> <p></p> <p></p> <p>Se deber\u00e1 crear un archivo <code>docker-compose.yml</code> en el directorio ra\u00edz del repositorio  clonado con el siguiente contenido:</p> <p></p> <p>La secci\u00f3n <code>postgres</code> define el contenedor de la base de datos, expone el puerto 5432 y monta un volumen para la persistencia de datos.</p> <p>La secci\u00f3n <code>addressbook</code> se encarga de construir la imagen de la aplicaci\u00f3n (usando el Dockerfile) y define variables de entorno  para conectarse a la base de datos. La variable <code>DB_HOST</code> se establece a <code>postgres</code>, que es el nombre del servicio de la base de datos.</p> <p>La directiva <code>depends_on</code> asegura que el contenedor de la base de datos se inicie antes que el de la aplicaci\u00f3n.</p> <p>Antes de iniciar los contenedores, se debe crear la estructura de la base de datos  (tablas, etc.). Para ello, se ejecutar\u00e1:</p> <p></p> <p>Se deber\u00e1 iniciar los contenedores con el siguiente comando:</p> <p></p> <p>Si se ejecuta el comando <code>docker compose run addressbook npm test</code>, se deber\u00e1 ver la siguiente salida:</p> <p></p>"},{"location":"practica1/practica1/#tarea","title":"Tarea","text":"<p>Se deber\u00e1 probar la aplicaci\u00f3n con la BBDD y una API:</p> <ul> <li> <p>A\u00f1ade una persona: <code>curl -X PUT http://localhost:3000/persons -H 'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Ra\u00fal\", \"lastName\": \"Profesor\"}'</code> </p> </li> <li> <p>Listar todas las personas: <code>curl -X GET http://localhost:3000/persons/all -H 'Content-Type: application/json'</code></p> </li> <li> <p>Buscar una persona por ID: <code>curl -X GET http://localhost:3000/persons/1 -H 'Content-Type: application/json'</code></p> </li> <li> <p>Eliminar una persona: <code>curl -X DELETE http://localhost:3000/persons/1 -H 'Content-Type: application/json'</code></p> </li> </ul> <p>Si todo funciona bien, se deber\u00e1n ver las siguientes salidas:</p> <p></p>"},{"location":"practica2/practica2/","title":"Pr\u00e1ctica 6.2 - Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y Docker-Compose","text":""},{"location":"practica2/practica2/#proceso-de-dockerizacion-de-nginxphpmysql","title":"Proceso de dockerizaci\u00f3n de Nginx+PHP+MySQL","text":"<p>Primeramente hay que conectarse mediante SSH a nuestra m\u00e1quina virtual.</p> <p></p>"},{"location":"practica2/practica2/#1-estructura-de-directorios","title":"1. Estructura de Directorios","text":"<p>Para comenzar esta pr\u00e1ctica, se deber\u00e1 tener una estructura de directorios similar a la siguiente:</p> <p></p> <p></p>"},{"location":"practica2/practica2/#2-creacion-de-un-contenedor-nginx","title":"2.  Creaci\u00f3n de un Contenedor Nginx","text":"<p>Se deber\u00e1 crear un contenedor Nginx y hacerlo funcionar para que permita alojar la aplicaci\u00f3n PHP.</p> <p>Para ello, primero, se deber\u00e1 editar el archivo <code>docker-compose.yml</code> con el siguiente contenido:</p> <p></p> <p>Y se iniciar\u00e1 el contenedor Nginx y se comprobar\u00e1 que funciona correctamente.</p> <p></p> <p>El archivo que se ha creado ser\u00e1 el encargado de descargarse la \u00faltima versi\u00f3n de la imagen de Nginx, crear un contenedor con ella y mapear el puerto 80 del contenedor al puerto 8081 del host.</p> <p>Si accedemos a la direcci\u00f3n <code>http://localhost:8081</code> deber\u00e1 aparecer la siguiente pantalla:</p> <p></p>"},{"location":"practica2/practica2/#3-creacion-de-un-contenedor-php","title":"3. Creaci\u00f3n de un Contenedor PHP","text":"<p>Editaremos el archivo <code>index.php</code> con el siguiente contenido:</p> <p></p> <p>Hecho esto se crear\u00e1 el archivo de configuraci\u00f3n <code>default.conf</code> en la carpeta <code>nginx</code> con el siguiente contenido:</p> <p></p> <p>Y se modificar\u00e1 el archivo <code>Dockerfile</code> dentro del directorio <code>nginx</code> con el siguiente contenido:</p> <p></p> <p>Se deber\u00e1 modificar el archivo <code>docker-compose.yml</code> con el siguiente contenido:</p> <p></p> <p>Con el fichero <code>docker-compose.yml</code> modificado, se crear\u00e1 un contenedor PHP en el puerto 9000 y enlazado con el contenedor Nginx.</p> <p>Ahora levntaremos los contenedores y comprobaremos que funcionan correctamente.</p> <p></p> <p>Si accedemos a la direcci\u00f3n <code>http://localhost:8081</code> deber\u00e1 aparecer la siguiente pantalla:</p> <p></p>"},{"location":"practica2/practica2/#4-creacion-de-un-contenedor-para-datos","title":"4. Creaci\u00f3n de un Contenedor para Datos","text":"<p>Se deber\u00e1 crear un contenedor para almacenar los datos. Para ello, se deber\u00e1 modificar el archivo <code>docker-compose.yml</code> con el siguiente contenido:</p> <p></p> <p>Comprobaremos que el contenedor de datos funciona correctamente.</p> <p></p> <p></p>"},{"location":"practica2/practica2/#5-creacion-de-un-contenedor-mysql","title":"5. Creaci\u00f3n de un Contenedor MySQL","text":"<p>Se deber\u00e1 crear un contenedor MySQL y hacerlo funcionar para que permita alojar la base de datos de la aplicaci\u00f3n PHP.</p> <p>Para ello, se deber\u00e1 modificar el archivo <code>Dockerfile</code> del directorio <code>php</code> con el siguiente contenido:</p> <p></p> <p>Se deber\u00e1 modificar el archivo <code>docker-compose.yml</code> con el siguiente contenido:</p> <p></p> <p>Se deber\u00e1 modificar el archivo <code>index.php</code> con el siguiente contenido:</p> <p></p> <p>Se comprueba que el contenedor MySQL funciona correctamente.</p> <p></p> <p></p>"},{"location":"practica2/practica2/#6-verificacion-de-conexion-a-la-base-de-datos","title":"6. Verificaci\u00f3n de Conexi\u00f3n a la Base de Datos","text":"<p>Si se accede a la direcci\u00f3n <code>http://localhost:8081</code> deber\u00e1 aparecer la siguiente pantalla:</p> <p></p> <p>Pero si se modifica el archivo <code>index.php</code> con el siguiente contenido:</p> <pre><code>    $user = 'root';\n    $password = 'secret';\n</code></pre> <p>Y deber\u00e1 quedar de la siguiente manera:</p> <p></p> <p>Si se accede a la direcci\u00f3n <code>http://localhost:8081</code> deber\u00e1 aparecer la siguiente pantalla:</p> <p></p> <p>Con esto se comprueba que la aplicaci\u00f3n PHP se conecta correctamente a la base de datos MySQL.</p> <p>Y con esto se finaliza la pr\u00e1ctica.</p>"},{"location":"practica2/practica2/#7-esquema-de-la-aplicacion","title":"7. Esquema de la Aplicaci\u00f3n","text":""},{"location":"practica3/practica3/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"practica3/practica3/#despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openldap","title":"Despliegue con Docker de NGINX + demonio de autenticaci\u00f3n LDAP + OpenLDAP","text":"<p>Primeramente hay que conectarse mediante SSH a nuestra m\u00e1quina virtual.</p> <p>Luego, se deber\u00e1 crear una estructura de directorios similar a la siguiente:</p> <p></p> <p>DEntro del directorio <code>app</code> se deber\u00e1 crear un archivo <code>index.html</code> con el siguiente contenido:</p> <p></p> <p>Ahora se crear\u00e1 otro directorio llamado <code>conf</code> y dentro de \u00e9l se crear\u00e1 un archivo <code>ldap_nginx.conf</code> con el siguiente contenido:</p> <p></p> <p>En la configuraci\u00f3n anterior se ha establecido que Nginx escuche en el puerto 8082 (el 8080 est\u00e1 ocupado) para las peticiones HTTP. Adem\u00e1s, se ha configurado una autenticaci\u00f3n para el directorio /auth-proxy, especificando la URL del servidor OpenLDAP (usando el nombre del contenedor Docker), el DN base para las b\u00fasquedas y las credenciales de acceso para realizar las consultas. </p> <p>Hecho esto, se crear\u00e1 un archivo <code>docker-compose.yml</code> con el siguiente contenido:</p> <p></p> <p>Con el archivo <code>docker-compose.yml</code> creado, se levantar\u00e1n los contenedores y se comprobar\u00e1 que funcionan correctamente.</p> <p></p> <p>Si accedemos a la direcci\u00f3n <code>http://tu-ip:8082</code> deber\u00e1 aparecer la siguiente pantalla:</p> <p></p> <p>Introdcimos las credenciales de acceso y deber\u00edamos poder acceder a la p\u00e1gina principal.</p> <p></p>"},{"location":"practica3/practica3/#despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<p>Haciendo uso de la anterior estructura de directorios, se crear\u00e1 un archivo <code>index.php</code> con el siguiente contenido:</p> <p></p> <p>En el directorio <code>Docker</code> se crear\u00e1 un archivo <code>Dockerfile</code> con el siguiente contenido:</p> <p></p> <p>Se crear\u00e1 un archivo en el directorio <code>Docker</code> llamado <code>ldap-demo.conf</code> con el siguiente contenido:</p> <p></p> <p>Se crear\u00e1 en el mismo directorio un archivo <code>.htaccess</code> con el siguiente contenido:</p> <p></p> <p>Hecho esto y comprobado que todo est\u00e9 correcto, se ejecutar\u00e1 el siguiente comando par construir la imagen:</p> <p></p> <p>Si todo ha ido bien, se ejecutar\u00e1 el siguiente comando para levantar el contenedor:</p> <p></p> <p>Si accedemos a la direcci\u00f3n <code>http://tu-ip:3000/demo</code> y nos logueamos con las credenciales de acceso <code>admin</code> y <code>Secret123</code>, deber\u00e1 aparecer la siguiente pantalla:</p> <p></p> <p>Con esto, se da por finalizada la pr\u00e1ctica.</p>"}]}